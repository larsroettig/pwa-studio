{
    "sourceFile": "packages/peregrine/lib/talons/ProductFullDetail/useProductFullDetail.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 25,
            "patches": [
                {
                    "date": 1626092252949,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1626092259109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -307,12 +307,12 @@\n                 }\n \n                 if (isSupportedProductType) {\n \n+                  if($\n \n \n \n-\n                     const variables = {\n                         cartId,\n                         parentSku: payload.parentSku,\n                         product: payload.item,\n"
                },
                {
                    "date": 1626092268612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -307,9 +307,10 @@\n                 }\n \n                 if (isSupportedProductType) {\n \n-                  if($\n+                  if(cartId === null) {\n+                      \n \n \n \n                     const variables = {\n"
                },
                {
                    "date": 1626093047232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -307,10 +307,9 @@\n                 }\n \n                 if (isSupportedProductType) {\n \n-                  if(cartId === null) {\n-                      \n+                  d\n \n \n \n                     const variables = {\n"
                },
                {
                    "date": 1626093053673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -307,9 +307,9 @@\n                 }\n \n                 if (isSupportedProductType) {\n \n-                  d\n+                  debugger;\n \n \n \n                     const variables = {\n"
                },
                {
                    "date": 1626093116711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,9 +187,9 @@\n     const isSupportedProductType = SUPPORTED_PRODUCT_TYPES.includes(\n         productType\n     );\n \n-    const [{ cartId }] = useCartContext();\n+    const [{ cartId,  createEmptyCart }] = useCartContext();\n     const [{ isSignedIn }] = useUserContext();\n \n     const { data: storeConfigData } = useQuery(\n         operations.getWishlistConfigQuery,\n"
                },
                {
                    "date": 1626093268895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,9 +187,9 @@\n     const isSupportedProductType = SUPPORTED_PRODUCT_TYPES.includes(\n         productType\n     );\n \n-    const [{ cartId,  createEmptyCart }] = useCartContext();\n+    const [{ cartId, createEmptyCart }] = useCartContext();\n     const [{ isSignedIn }] = useUserContext();\n \n     const { data: storeConfigData } = useQuery(\n         operations.getWishlistConfigQuery,\n@@ -304,15 +304,10 @@\n                         optionSelections,\n                         optionCodes\n                     );\n                 }\n-\n+                debugger;\n                 if (isSupportedProductType) {\n-\n-                  debugger;\n-\n-\n-\n                     const variables = {\n                         cartId,\n                         parentSku: payload.parentSku,\n                         product: payload.item,\n"
                },
                {
                    "date": 1626093329627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -304,9 +304,9 @@\n                         optionSelections,\n                         optionCodes\n                     );\n                 }\n-                debugger;\n+\n                 if (isSupportedProductType) {\n                     const variables = {\n                         cartId,\n                         parentSku: payload.parentSku,\n"
                },
                {
                    "date": 1626093391410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -285,8 +285,10 @@\n     }, [attributeIdToValuesMap, optionSelections]);\n \n     const handleAddToCart = useCallback(\n         async formValues => {\n+\n+            \n             const { quantity } = formValues;\n \n             /*\n                 @deprecated in favor of general addProductsToCart mutation. Will support until the next MAJOR.\n"
                },
                {
                    "date": 1626093401449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -286,9 +286,10 @@\n \n     const handleAddToCart = useCallback(\n         async formValues => {\n \n-            \n+            debugger;\n+\n             const { quantity } = formValues;\n \n             /*\n                 @deprecated in favor of general addProductsToCart mutation. Will support until the next MAJOR.\n"
                },
                {
                    "date": 1626093479722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -288,8 +288,10 @@\n         async formValues => {\n \n             debugger;\n \n+            createEmptyCart\n+\n             const { quantity } = formValues;\n \n             /*\n                 @deprecated in favor of general addProductsToCart mutation. Will support until the next MAJOR.\n"
                },
                {
                    "date": 1626093485851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -285,13 +285,12 @@\n     }, [attributeIdToValuesMap, optionSelections]);\n \n     const handleAddToCart = useCallback(\n         async formValues => {\n-\n             debugger;\n \n-            createEmptyCart\n-\n+            createEmptyCart();\n+            \n             const { quantity } = formValues;\n \n             /*\n                 @deprecated in favor of general addProductsToCart mutation. Will support until the next MAJOR.\n"
                },
                {
                    "date": 1626093496972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -286,11 +286,10 @@\n \n     const handleAddToCart = useCallback(\n         async formValues => {\n             debugger;\n+            createEmptyCart();\n \n-            createEmptyCart();\n-            \n             const { quantity } = formValues;\n \n             /*\n                 @deprecated in favor of general addProductsToCart mutation. Will support until the next MAJOR.\n"
                },
                {
                    "date": 1626093507192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -286,8 +286,11 @@\n \n     const handleAddToCart = useCallback(\n         async formValues => {\n             debugger;\n+\n+\n+            if((\n             createEmptyCart();\n \n             const { quantity } = formValues;\n \n"
                },
                {
                    "date": 1626093515900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -288,9 +288,9 @@\n         async formValues => {\n             debugger;\n \n \n-            if((\n+            if(cart\n             createEmptyCart();\n \n             const { quantity } = formValues;\n \n"
                },
                {
                    "date": 1626093521105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -288,9 +288,9 @@\n         async formValues => {\n             debugger;\n \n \n-            if(cart\n+            if(cartId\n             createEmptyCart();\n \n             const { quantity } = formValues;\n \n"
                },
                {
                    "date": 1626093527525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -288,9 +288,10 @@\n         async formValues => {\n             debugger;\n \n \n-            if(cartId\n+            if(cartId === null\n+\n             createEmptyCart();\n \n             const { quantity } = formValues;\n \n"
                },
                {
                    "date": 1626093533906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -288,10 +288,12 @@\n         async formValues => {\n             debugger;\n \n \n-            if(cartId === null\n+            if(cartId === null){\n \n+                \n+\n             createEmptyCart();\n \n             const { quantity } = formValues;\n \n"
                },
                {
                    "date": 1626093541881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -289,12 +289,12 @@\n             debugger;\n \n \n             if(cartId === null){\n+               $cartId createEmptyCart();\n+            }\n \n-                \n \n-            createEmptyCart();\n \n             const { quantity } = formValues;\n \n             /*\n"
                },
                {
                    "date": 1626093549644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -289,9 +289,9 @@\n             debugger;\n \n \n             if(cartId === null){\n-               $cartId createEmptyCart();\n+                createEmptyCart();\n             }\n \n \n \n"
                },
                {
                    "date": 1626093613732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,9 +187,9 @@\n     const isSupportedProductType = SUPPORTED_PRODUCT_TYPES.includes(\n         productType\n     );\n \n-    const [{ cartId, createEmptyCart }] = useCartContext();\n+    const [{ cartId }] = useCartContext();\n     const [{ isSignedIn }] = useUserContext();\n \n     const { data: storeConfigData } = useQuery(\n         operations.getWishlistConfigQuery,\n"
                },
                {
                    "date": 1626093694033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,9 +187,9 @@\n     const isSupportedProductType = SUPPORTED_PRODUCT_TYPES.includes(\n         productType\n     );\n \n-    const [{ cartId }] = useCartContext();\n+    const [{ cartId },, createEmptyCart] = useCartContext();\n     const [{ isSignedIn }] = useUserContext();\n \n     const { data: storeConfigData } = useQuery(\n         operations.getWishlistConfigQuery,\n"
                },
                {
                    "date": 1626096070214,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,9 +187,14 @@\n     const isSupportedProductType = SUPPORTED_PRODUCT_TYPES.includes(\n         productType\n     );\n \n-    const [{ cartId },, createEmptyCart] = useCartContext();\n+    const [{ cartId }] = useCartContext();\n+\n+\n+\n+\n+\n     const [{ isSignedIn }] = useUserContext();\n \n     const { data: storeConfigData } = useQuery(\n         operations.getWishlistConfigQuery,\n@@ -285,17 +290,8 @@\n     }, [attributeIdToValuesMap, optionSelections]);\n \n     const handleAddToCart = useCallback(\n         async formValues => {\n-            debugger;\n-\n-\n-            if(cartId === null){\n-                createEmptyCart();\n-            }\n-\n-\n-\n             const { quantity } = formValues;\n \n             /*\n                 @deprecated in favor of general addProductsToCart mutation. Will support until the next MAJOR.\n"
                },
                {
                    "date": 1626096077844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -190,11 +190,11 @@\n \n     const [{ cartId }] = useCartContext();\n \n \n+   if(\n \n \n-\n     const [{ isSignedIn }] = useUserContext();\n \n     const { data: storeConfigData } = useQuery(\n         operations.getWishlistConfigQuery,\n"
                },
                {
                    "date": 1626096084255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -190,9 +190,9 @@\n \n     const [{ cartId }] = useCartContext();\n \n \n-   if(\n+   if(carr\n \n \n     const [{ isSignedIn }] = useUserContext();\n \n"
                },
                {
                    "date": 1626096162696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -190,11 +190,11 @@\n \n     const [{ cartId }] = useCartContext();\n \n \n-   if(carr\n \n \n+\n     const [{ isSignedIn }] = useUserContext();\n \n     const { data: storeConfigData } = useQuery(\n         operations.getWishlistConfigQuery,\n"
                }
            ],
            "date": 1626092252949,
            "name": "Commit-0",
            "content": "import { useCallback, useState, useMemo } from 'react';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { useCartContext } from '@magento/peregrine/lib/context/cart';\nimport { useUserContext } from '@magento/peregrine/lib/context/user';\n\nimport { appendOptionsToPayload } from '@magento/peregrine/lib/util/appendOptionsToPayload';\nimport { findMatchingVariant } from '@magento/peregrine/lib/util/findMatchingProductVariant';\nimport { isProductConfigurable } from '@magento/peregrine/lib/util/isProductConfigurable';\nimport { deriveErrorMessage } from '../../util/deriveErrorMessage';\nimport mergeOperations from '../../util/shallowMerge';\nimport defaultOperations from './productFullDetail.gql';\n\nconst INITIAL_OPTION_CODES = new Map();\nconst INITIAL_OPTION_SELECTIONS = new Map();\n\nconst deriveOptionCodesFromProduct = product => {\n    // If this is a simple product it has no option codes.\n    if (!isProductConfigurable(product)) {\n        return INITIAL_OPTION_CODES;\n    }\n\n    // Initialize optionCodes based on the options of the product.\n    const initialOptionCodes = new Map();\n    for (const {\n        attribute_id,\n        attribute_code\n    } of product.configurable_options) {\n        initialOptionCodes.set(attribute_id, attribute_code);\n    }\n\n    return initialOptionCodes;\n};\n\n// Similar to deriving the initial codes for each option.\nconst deriveOptionSelectionsFromProduct = product => {\n    if (!isProductConfigurable(product)) {\n        return INITIAL_OPTION_SELECTIONS;\n    }\n\n    const initialOptionSelections = new Map();\n    for (const { attribute_id } of product.configurable_options) {\n        initialOptionSelections.set(attribute_id, undefined);\n    }\n\n    return initialOptionSelections;\n};\n\nconst getIsMissingOptions = (product, optionSelections) => {\n    // Non-configurable products can't be missing options.\n    if (!isProductConfigurable(product)) {\n        return false;\n    }\n\n    // Configurable products are missing options if we have fewer\n    // option selections than the product has options.\n    const { configurable_options } = product;\n    const numProductOptions = configurable_options.length;\n    const numProductSelections = Array.from(optionSelections.values()).filter(\n        value => !!value\n    ).length;\n\n    return numProductSelections < numProductOptions;\n};\n\nconst getMediaGalleryEntries = (product, optionCodes, optionSelections) => {\n    let value = [];\n\n    const { media_gallery_entries, variants } = product;\n    const isConfigurable = isProductConfigurable(product);\n\n    // Selections are initialized to \"code => undefined\". Once we select a value, like color, the selections change. This filters out unselected options.\n    const optionsSelected =\n        Array.from(optionSelections.values()).filter(value => !!value).length >\n        0;\n\n    if (!isConfigurable || !optionsSelected) {\n        value = media_gallery_entries;\n    } else {\n        // If any of the possible variants matches the selection add that\n        // variant's image to the media gallery. NOTE: This _can_, and does,\n        // include variants such as size. If Magento is configured to display\n        // an image for a size attribute, it will render that image.\n        const item = findMatchingVariant({\n            optionCodes,\n            optionSelections,\n            variants\n        });\n\n        value = item\n            ? [...item.product.media_gallery_entries, ...media_gallery_entries]\n            : media_gallery_entries;\n    }\n\n    return value;\n};\n\n// We only want to display breadcrumbs for one category on a PDP even if a\n// product has multiple related categories. This function filters and selects\n// one category id for that purpose.\nconst getBreadcrumbCategoryId = categories => {\n    // Exit if there are no categories for this product.\n    if (!categories || !categories.length) {\n        return;\n    }\n    const breadcrumbSet = new Set();\n    categories.forEach(({ breadcrumbs }) => {\n        // breadcrumbs can be `null`...\n        (breadcrumbs || []).forEach(({ category_id }) =>\n            breadcrumbSet.add(category_id)\n        );\n    });\n\n    // Until we can get the single canonical breadcrumb path to a product we\n    // will just return the first category id of the potential leaf categories.\n    const leafCategory = categories.find(\n        category => !breadcrumbSet.has(category.id)\n    );\n\n    // If we couldn't find a leaf category then just use the first category\n    // in the list for this product.\n    return leafCategory.id || categories[0].id;\n};\n\nconst getConfigPrice = (product, optionCodes, optionSelections) => {\n    let value;\n\n    const { variants } = product;\n    const isConfigurable = isProductConfigurable(product);\n\n    const optionsSelected =\n        Array.from(optionSelections.values()).filter(value => !!value).length >\n        0;\n\n    if (!isConfigurable || !optionsSelected) {\n        value = product.price.regularPrice.amount;\n    } else {\n        const item = findMatchingVariant({\n            optionCodes,\n            optionSelections,\n            variants\n        });\n\n        value = item\n            ? item.product.price.regularPrice.amount\n            : product.price.regularPrice.amount;\n    }\n\n    return value;\n};\n\nconst SUPPORTED_PRODUCT_TYPES = ['SimpleProduct', 'ConfigurableProduct'];\n\n/**\n * @param {GraphQLDocument} props.addConfigurableProductToCartMutation - configurable product mutation\n * @param {GraphQLDocument} props.addSimpleProductToCartMutation - configurable product mutation\n * @param {Object.<string, GraphQLDocument>} props.operations - collection of operation overrides merged into defaults\n * @param {Object} props.product - the product, see RootComponents/Product\n *\n * @returns {{\n *  breadcrumbCategoryId: string|undefined,\n *  errorMessage: string|undefined,\n *  handleAddToCart: func,\n *  handleSelectionChange: func,\n *  handleSetQuantity: func,\n *  isAddToCartDisabled: boolean,\n *  isSupportedProductType: boolean,\n *  mediaGalleryEntries: array,\n *  productDetails: object,\n *  quantity: number\n * }}\n */\nexport const useProductFullDetail = props => {\n    const {\n        addConfigurableProductToCartMutation,\n        addSimpleProductToCartMutation,\n        product\n    } = props;\n\n    const hasDeprecatedOperationProp = !!(\n        addConfigurableProductToCartMutation || addSimpleProductToCartMutation\n    );\n\n    const operations = mergeOperations(defaultOperations, props.operations);\n\n    const productType = product.__typename;\n\n    const isSupportedProductType = SUPPORTED_PRODUCT_TYPES.includes(\n        productType\n    );\n\n    const [{ cartId }] = useCartContext();\n    const [{ isSignedIn }] = useUserContext();\n\n    const { data: storeConfigData } = useQuery(\n        operations.getWishlistConfigQuery,\n        {\n            fetchPolicy: 'cache-and-network'\n        }\n    );\n\n    const [\n        addConfigurableProductToCart,\n        {\n            error: errorAddingConfigurableProduct,\n            loading: isAddConfigurableLoading\n        }\n    ] = useMutation(\n        addConfigurableProductToCartMutation ||\n            operations.addConfigurableProductToCartMutation\n    );\n\n    const [\n        addSimpleProductToCart,\n        { error: errorAddingSimpleProduct, loading: isAddSimpleLoading }\n    ] = useMutation(\n        addSimpleProductToCartMutation ||\n            operations.addSimpleProductToCartMutation\n    );\n\n    const [\n        addProductToCart,\n        { error: errorAddingProductToCart, loading: isAddProductLoading }\n    ] = useMutation(operations.addProductToCartMutation);\n\n    const breadcrumbCategoryId = useMemo(\n        () => getBreadcrumbCategoryId(product.categories),\n        [product.categories]\n    );\n\n    const derivedOptionSelections = useMemo(\n        () => deriveOptionSelectionsFromProduct(product),\n        [product]\n    );\n\n    const [optionSelections, setOptionSelections] = useState(\n        derivedOptionSelections\n    );\n\n    const derivedOptionCodes = useMemo(\n        () => deriveOptionCodesFromProduct(product),\n        [product]\n    );\n    const [optionCodes] = useState(derivedOptionCodes);\n\n    const isMissingOptions = useMemo(\n        () => getIsMissingOptions(product, optionSelections),\n        [product, optionSelections]\n    );\n    const mediaGalleryEntries = useMemo(\n        () => getMediaGalleryEntries(product, optionCodes, optionSelections),\n        [product, optionCodes, optionSelections]\n    );\n\n    // The map of ids to values (and their uids)\n    // For example:\n    // { \"179\" => [{ uid: \"abc\", value_index: 1 }, { uid: \"def\", value_index: 2 }]}\n    const attributeIdToValuesMap = useMemo(() => {\n        const map = new Map();\n        // For simple items, this will be an empty map.\n        const options = product.configurable_options || [];\n        for (const { attribute_id, values } of options) {\n            map.set(attribute_id, values);\n        }\n        return map;\n    }, [product.configurable_options]);\n\n    // An array of selected option uids. Useful for passing to mutations.\n    // For example:\n    // [\"abc\", \"def\"]\n    const selectedOptionsArray = useMemo(() => {\n        const selectedOptions = [];\n\n        optionSelections.forEach((value, key) => {\n            const values = attributeIdToValuesMap.get(key);\n\n            const selectedValue = values.find(\n                item => item.value_index === value\n            );\n\n            if (selectedValue) {\n                selectedOptions.push(selectedValue.uid);\n            }\n        });\n        return selectedOptions;\n    }, [attributeIdToValuesMap, optionSelections]);\n\n    const handleAddToCart = useCallback(\n        async formValues => {\n            const { quantity } = formValues;\n\n            /*\n                @deprecated in favor of general addProductsToCart mutation. Will support until the next MAJOR.\n             */\n            if (hasDeprecatedOperationProp) {\n                const payload = {\n                    item: product,\n                    productType,\n                    quantity\n                };\n\n                if (isProductConfigurable(product)) {\n                    appendOptionsToPayload(\n                        payload,\n                        optionSelections,\n                        optionCodes\n                    );\n                }\n\n                if (isSupportedProductType) {\n\n\n\n\n\n                    const variables = {\n                        cartId,\n                        parentSku: payload.parentSku,\n                        product: payload.item,\n                        quantity: payload.quantity,\n                        sku: payload.item.sku\n                    };\n                    // Use the proper mutation for the type.\n                    if (productType === 'SimpleProduct') {\n                        try {\n                            await addSimpleProductToCart({\n                                variables\n                            });\n                        } catch {\n                            return;\n                        }\n                    } else if (productType === 'ConfigurableProduct') {\n                        try {\n                            await addConfigurableProductToCart({\n                                variables\n                            });\n                        } catch {\n                            return;\n                        }\n                    }\n                } else {\n                    console.error(\n                        'Unsupported product type. Cannot add to cart.'\n                    );\n                }\n            } else {\n                const variables = {\n                    cartId,\n                    product: {\n                        sku: product.sku,\n                        quantity\n                    }\n                };\n\n                if (selectedOptionsArray.length) {\n                    variables.product.selected_options = selectedOptionsArray;\n                }\n\n                try {\n                    await addProductToCart({ variables });\n                } catch {\n                    return;\n                }\n            }\n        },\n        [\n            addConfigurableProductToCart,\n            addProductToCart,\n            addSimpleProductToCart,\n            cartId,\n            hasDeprecatedOperationProp,\n            isSupportedProductType,\n            optionCodes,\n            optionSelections,\n            product,\n            productType,\n            selectedOptionsArray\n        ]\n    );\n\n    const handleSelectionChange = useCallback(\n        (optionId, selection) => {\n            // We must create a new Map here so that React knows that the value\n            // of optionSelections has changed.\n            const nextOptionSelections = new Map([...optionSelections]);\n            nextOptionSelections.set(optionId, selection);\n            setOptionSelections(nextOptionSelections);\n        },\n        [optionSelections]\n    );\n\n    const productPrice = useMemo(\n        () => getConfigPrice(product, optionCodes, optionSelections),\n        [product, optionCodes, optionSelections]\n    );\n\n    // Normalization object for product details we need for rendering.\n    const productDetails = {\n        description: product.description,\n        name: product.name,\n        price: productPrice,\n        sku: product.sku\n    };\n\n    const derivedErrorMessage = useMemo(\n        () =>\n            deriveErrorMessage([\n                errorAddingSimpleProduct,\n                errorAddingConfigurableProduct,\n                errorAddingProductToCart\n            ]),\n        [\n            errorAddingConfigurableProduct,\n            errorAddingProductToCart,\n            errorAddingSimpleProduct\n        ]\n    );\n\n    const wishlistItemOptions = useMemo(() => {\n        const options = {\n            quantity: 1,\n            sku: product.sku\n        };\n\n        if (productType === 'ConfigurableProduct') {\n            options.selected_options = selectedOptionsArray;\n        }\n\n        return options;\n    }, [product, productType, selectedOptionsArray]);\n\n    return {\n        breadcrumbCategoryId,\n        errorMessage: derivedErrorMessage,\n        handleAddToCart,\n        handleSelectionChange,\n        isAddToCartDisabled:\n            isMissingOptions ||\n            isAddConfigurableLoading ||\n            isAddSimpleLoading ||\n            isAddProductLoading,\n        isSupportedProductType,\n        mediaGalleryEntries,\n        shouldShowWishlistButton:\n            isSignedIn &&\n            storeConfigData &&\n            !!storeConfigData.storeConfig.magento_wishlist_general_is_enabled,\n        productDetails,\n        wishlistItemOptions\n    };\n};\n"
        }
    ]
}